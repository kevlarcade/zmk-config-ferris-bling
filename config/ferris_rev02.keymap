/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define QWT_L 0 // QWERTY Lafayette
#define QAC_L 1 // QWERY Lafayette accents and diacritics
#define NUM_L 2 // Numbers
#define ALT_L 3 // Alt-Gr
#define ERG_L 4 // ERGO-L
#define EAC_L 5 // ERGO-L accents and diacritics

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

// |        Key definition                                                   <<<
// =============================================================================

        // |            Alphas                                               <<<
        //======================================================================
        #define ___A___ &kp A           // A
        #define ___B___ &kp B           // B
        #define ___C___ &kp C           // C
        #define ___D___ &kp D           // D
        #define ___E___ &kp E           // E
        #define ___F___ &kp F           // F
        #define ___G___ &kp G           // G
        #define ___H___ &kp H           // H
        #define ___I___ &kp I           // I
        #define ___J___ &kp J           // J
        #define ___K___ &kp K           // K
        #define ___L___ &kp L           // L
        #define ___M___ &kp M           // M
        #define ___N___ &kp N           // N
        #define ___O___ &kp O           // O
        #define ___P___ &kp P           // P
        #define ___Q___ &kp Q           // Q
        #define ___R___ &kp R           // R
        #define ___S___ &kp S           // S
        #define ___T___ &kp T           // T
        #define ___U___ &kp U           // U
        #define ___V___ &kp V           // V
        #define ___W___ &kp W           // W
        #define ___X___ &kp X           // X
        #define ___Y___ &kp Y           // Y
        #define ___Z___ &kp Z           // Z
        // >>>

        // |            Numbers                                              <<<
        //======================================================================
        #define ___1___ &kp N1          // 1
        #define ___2___ &kp N2          // 2
        #define ___3___ &kp N3          // 3
        #define ___4___ &kp N4          // 4
        #define ___5___ &kp N5          // 5
        #define ___6___ &kp N6          // 6
        #define ___7___ &kp N7          // 7
        #define ___8___ &kp N8          // 8
        #define ___9___ &kp N9          // 9
        #define ___0___ &kp N0          // 0
        // >>>

        // |            Symbols                                              <<<
        //======================================================================
        #define _GRAVE_ &kp GRAVE       // `
        #define _TILDE_ &kp TILDE       // ~
        #define _EXCLN_ &kp EXCL        // !
        #define __AT___ &kp AT          // @
        #define _HASH__ &kp HASH        // #
        #define _DOLAR_ &kp DLLR        // $
        #define _PRCNT_ &kp PRCNT       // %
        #define _CARET_ &kp CARET       // ^
        #define _AMPS__ &kp AMPS        // &
        #define _STAR__ &kp KP_MULTIPLY // *
        #define _L_PAR_ &kp LPAR        // (
        #define _R_PAR_ &kp RPARA       // )
        #define _MINUS_ &kp KP_MINUS    // -
        #define _UNDER_ &kp UNDER       // _
        #define _EQUAL_ &kp EQUAL       // =
        #define _PLUS__ &kp KP_PLUS     // +
        #define _SLASH_ &kp FSLH        // /
        #define _QMARK_ &kp QMARK       // ?
        #define _L_BKT_ &kp LBKT        // [
        #define _L_BRC_ &kp LBRC        // {
        #define _R_BKT_ &kp RBKT        // ]
        #define _R_BRC_ &kp RBRC        // }
        #define _BSLSH_ &kp BSLH        // \ 
        #define _PIPE__ &kp PIPE        // |
        #define _QUOTE_ &kp SQT         // '"
        #define __L_T__ &kp LT          // <
        #define __G_T__ &kp GT          // >
        #define _D_QOT_ &kp DQT         // "
        // >>>

        // |            Mods                                                 <<<
        //======================================================================
        #define _SPACE_ &lt NUM_L SPACE // Access num_layer by hold and space by tap
        #define _BCSPC_ &lt ALT_L BSPC  // Access alt_layer by hold and bacspcace by tap
        #define _ENTER_ &kp RET         // Return
        #define _SHIFT_ &kp LSHIFT      // Shift
        #define __ESC__ &kp ESC         // Escape
        #define __DEL__ &kp DEL         // Delete
        #define _META__ &kp K_CMENU     // Meta
        // >>>

        // |            Navigations                                          <<<
        //======================================================================
        #define _HOME__ &kp HOME        // Home
        #define __END__ &kp END         // End
        #define __INS__ &kp INS         // Inser
        #define _PG_UP_ &kp PG_UP       // Page Up
        #define _PDOWN_ &kp PG_DN       // Page Down
        // >>>

        // |            Accents & diacritics                                 <<<
        //======================================================================
        // TODO: Set the diacritics if ZMK supports it and accents
        // #define _______
        // >>>

        // |            Customs                                              <<<
        //======================================================================
        #define _LOCK__ &kp LC(LS(RET)) // Shift+Meta+Return
        #define _TERM__ &kp LC(RET)     // Meta+Return
        #define __CUT__ &kp LC(X)       // Ctrl+x
        #define _UNDO__ &kp LC(Z)       // Ctrl+z
        #define _REDO__ &kp LC(W)       // Ctrl+w
        #define _COPY__ &kp LC(C)       // Ctrl+c
        #define _PASTE_ &kp LC(V)       // Ctrl+v
        #define _______ &trans          // Use bottom layer
        #define _QWERT_ &to QWT_L       // Change to Qwerty Lafayette layer
        #define _ERGOL_ &to ERG_L       // Change to Ergo-L layer
        // TODO: Set sticky layer to emulate this customs dead keys
        // https://zmk.dev/docs/behaviors/sticky-layer
        //#define __QAL__                 // Access QWERTY accent layer for next input
        //#define __EAL__                 // Access Ergo-L accent layer for next input
        // TODO: Redifine this keys with Mod-Morph
        // https://zmk.dev/docs/behaviors/mod-morph
        //#define _COMMA_                 // ,;
        //#define __DOT__                 // .:
        //#define _E_CUS_                 // Ergo-L dash and question mark key
        // >>>

// >>>

//                Template keyboard
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                                           _______  _______    _______  _______


        // |        QWERTY Lafayette                                         <<<
        //======================================================================
        default_layer {
            bindings = <
                ___Q___  ___W___  ___E___  ___R___  ___T___    ___Y___  ___U___  ___I___  ___O___  ___P___
                ___A___  ___S___  ___D___  ___F___  ___G___    ___H___  ___J___  ___K___  ___L___  __QAL__
                ___Z___  ___X___  ___C___  ___V___  ___B___    ___N___  ___M___  _COMMA_  __DOT__  _SLASH_
                                           _SHIFT_  _SPACE_    _BCSPC_  _ENTER_
            >;
        };

        // >>>

        // |        Accents and diacritics for QWERTY Lafayette              <<<
        //======================================================================
        qwerty_accent_layer {
            bindings = <
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                                           _______  _______    _______  _______
            >;
        };

        // >>>

        // |        Number row and some mods                                 <<<
        //======================================================================
        num_layer {
            bindings = <
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                                           _______  _______    _______  _______
            >;
        };

        // >>>

        // |        Alt-Gr                                                   <<<
        //======================================================================
        alt_layer {
            bindings = <
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                                           _______  _______    _______  _______
            >;
        };

        // >>>

        // |        ERGO-L                                                   <<<
        //======================================================================
        ergol_layer {
            bindings = <
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                                           _______  _______    _______  _______
            >;
        };

        // >>>

        // |        Accents and diacritics for ERGO-L                        <<<
        //======================================================================
        ergol_accent_layer {
            bindings = <
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                _______  _______  _______  _______  _______    _______  _______  _______  _______  _______
//                                           _______  _______    _______  _______
            >;
        };
        // >>>
    };
};
// vim: set fdm=marker fmr=<<<,>>> fdl=0 ft=c:
